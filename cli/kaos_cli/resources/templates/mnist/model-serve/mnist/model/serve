#!/usr/bin/env python3

# This file implements the scoring service shell. You don't necessarily need to modify it for various
# algorithms. It starts nginx and gunicorn with the correct configurations and then simply waits until
# gunicorn exits.
#
# The flask server is specified to be the app object in wsgi.py
#
# We set the following parameters:
#
# Parameter                Environment Variable              Default Value
# ---------                --------------------              -------------
# number of workers        MODEL_SERVER_WORKERS              the number of CPU cores
# timeout                  MODEL_SERVER_TIMEOUT              60 seconds

from __future__ import print_function

import multiprocessing
import os
import signal
import subprocess
import sys

# ============================== #
# REQUIRED ENVIRONMENT VARIABLES #
# ============================== #
model_server_timeout = os.environ.get('MODEL_SERVER_TIMEOUT', 60)  # default of 60 seconds is within SageMaker limit
model_server_workers = int(os.environ.get('MODEL_SERVER_WORKERS', multiprocessing.cpu_count()))  # dynamic cpu num


def sigterm_handler(nginx_pid, gunicorn_pid):
    """
    Function for sending a "kill process" command to application (nginx + gunicorn)

    Args:
        nginx_pid (file): process id for nginx
        gunicorn_pid (file): process id for gunicorn

    """

    try:
        os.kill(nginx_pid, signal.SIGQUIT)
    except OSError:
        pass
    try:
        os.kill(gunicorn_pid, signal.SIGTERM)
    except OSError:
        pass

    sys.exit(0)


def start_server():
    """
    Main function to initiate application on desired number of workers (defined based on ENV)

    Returns:
        running application based on `nginx.conf` -> fixed routes /ping and /invocations

    """
    # initiate the server with X workers
    print('****** Start inference server ({} workers) ******'.format(model_server_workers))
    kill_existing_processes()

    # link the log streams to stdout/err so they will be logged to the container logs
    subprocess.check_call(['ln', '-sf', '/dev/stdout', '/var/log/nginx/access.log'])
    subprocess.check_call(['ln', '-sf', '/dev/stderr', '/var/log/nginx/error.log'])

    # initiate the nginx server based on the .conf -> fixed routes (limitation by SageMaker)
    nginx = subprocess.Popen(['nginx', '-c', '/opt/program/nginx.conf'])

    # connect python app (wsgi:app) to nginx server with gunicorn
    gunicorn = subprocess.Popen(['gunicorn',
                                 '--timeout', str(model_server_timeout),
                                 '-k', 'gevent',
                                 '-b', 'unix:/tmp/gunicorn.sock',
                                 '-w', str(model_server_workers),
                                 'wsgi:app'])
    signal.signal(signal.SIGTERM, lambda a, b: sigterm_handler(nginx.pid, gunicorn.pid))

    # ensure processes are still running
    pids = {nginx.pid, gunicorn.pid}
    while True:
        pid, _ = os.wait()
        if pid in pids:
            break

    # kill processes
    sigterm_handler(nginx.pid, gunicorn.pid)
    print('****** Inference server exiting ******')


def kill_existing_processes():
    print('****** Check existing background processes ******')
    data = [(int(p), c) for p, c in [x.rstrip('\n').split(' ', 1) for x in os.popen('ps h -eo pid:1,command')]]
    processes = list(filter(lambda x: "nginx: master process" in x[1], data))
    if len(processes):
        pid, cmd = processes[0]
        print('****** Killing existing nginx processes ******')
        os.kill(pid, signal.SIGQUIT)
        print('killed process %s' % cmd)


if __name__ == '__main__':
    start_server()
